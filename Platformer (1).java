/* autogenerated by Processing revision 1293 on 2023-11-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Platformer extends PApplet {


final static float MOVE_SPEED = 10;
final static float SPRITE_SCALE = 50.0f/64;
final static float SPRITE_SCALE1 = 50.0f/1920;
final static float SPRITE_SCALE2 =50.0f/45;
final static float SPRITE_SCALE3 = 225.0f/600;
final static float Teach_Scale=100.0f/226;
final static float SPRITE_SIZE = 50;
final static float GRAVITY= 0.6f;
final static float JUMP_SPEED = 17.5f;

final static float RIGHT_MARGIN = 400;
final static float LEFT_MARGIN = 60;
final static float VERTICAL_MARGIN = 40;

final static int NEUTRAL_FACING = 0;
final static int RIGHT_FACING = 1;
final static int LEFT_FACING  = 2;

final static float WIDTH = SPRITE_SIZE * 38.4f;
final static float HEIGHT = SPRITE_SIZE * 24;
final static float GROUND_LEVEL = HEIGHT-SPRITE_SIZE;

boolean ready;
boolean resumeT;
boolean mentor;
boolean level1;
boolean level2;
boolean collideEnemy;
boolean collideEnemy1;
boolean collideEnemy2;
boolean collideEnemy3;
boolean collideEnemy4;
boolean collideEnemy5;
boolean collideEnemy6;
boolean collideEnemy7;
boolean collideEnemy8;
boolean account;
boolean market;
boolean interview;
boolean infoManage;
int sec = second();
Sprite home_screen;
Sprite win1;
Sprite teach;
Sprite mentor1;
Sprite mentor2;
Sprite s1,s2;
Sprite p;
Sprite text;
Sprite resume;
Sprite enemy1;
Sprite enemy2;
Sprite enemy3;
Sprite enemy4;
Sprite enemy5;
Sprite enemy6;
Sprite enemy7;
Sprite enemy8;
Sprite enemy9;
Sprite win;
Sprite lose;
PImage tile1, desk, enemy, shelf;
float move;
float move1;
float move2;
float move3;
float move4;
float move5;
float move6;
float move7;
float move8;
float move9;
float move10;
float view_x = 0;
float view_y =0;
ArrayList<Sprite> platforms;
ArrayList<Sprite> walks;
String teach1;
int green1, green2, green3, green4, green5,green6,green7,green8,green9,green10;
int bar_of_know;
boolean level2Start;
boolean isGameOver;
boolean isOnHome;
boolean chat;
boolean chat1;
boolean chat2;
boolean chat3;
boolean chat4;
boolean chat5;
boolean firstDone;
boolean secondDone;
boolean thirdDone;
boolean fourthDone;
boolean fifthDone;
boolean sixthDone;
boolean reset;
boolean reset1;
boolean reset2;
boolean reset3;
boolean reset4;
boolean firstRun;
boolean lose1;
int question=5;
public void setup(){
/* size commented out by preprocessor */;
imageMode(CENTER);
frameRate(30);
isOnHome=true;
chat=false;
chat1=false;
chat2=false;
chat3=false;
chat4=false;
chat5=false;
firstDone=false;
secondDone=false;
 thirdDone=false;
fourthDone=false;
 fifthDone=false;
sixthDone=false;
teach1="Teach1.png";
 reset=false;
 reset1=false;
reset2=false;
reset3=false;
reset4=false;
 firstRun=true;
lose1=false;
teach = new Sprite(teach1, Teach_Scale, 3200,850);
mentor1= new Sprite("playerLvl2.png",1.0f,1600,2100);
mentor2= new Sprite("teach4.png",Teach_Scale,3200,2100);
p=new Sprite("Player.png", 0.5f);
home_screen= new Sprite("home.png",0.8f,950,650);
resume = new Sprite("resume.png",1.0f,p.center_x+950,mentor1.center_y-315);
win1 = new Sprite("win2.png",1.0f,view_x+950,view_y+500);
bar_of_know=0;
p.setBottom(800);
p.center_x= 100;
p.change_x=0;
p.change_y=0;
isGameOver=false;
mentor=true;
resumeT=false;
platforms = new ArrayList<Sprite>();
walks = new ArrayList<Sprite>();
enemy1 = new Sprite("badguy1.png",0.5f);
enemy1.center_x=340;
enemy1.setBottom(1047);
enemy1.change_x=0;
enemy2= new Sprite("badguy2.png",0.5f);
enemy2.center_x=990;
enemy2.setBottom(1047);
enemy2.change_x=0;
enemy3 = new Sprite("badguy3.png",0.5f);
enemy3.center_x=1500;
enemy3.setBottom(1047);
enemy3.change_x=0;
enemy4=new Sprite("badguy4.png",0.5f);
enemy4.center_x=2250;
enemy4.setBottom(1047);
enemy4.change_x=0;
enemy5=new Sprite("badguy1.png",0.5f);
enemy5.center_x=390;
enemy5.setBottom(1047);
enemy5.change_x=0;
enemy6=new Sprite("badguy3.png",0.5f);
enemy6.center_x=1500;
enemy6.setBottom(1047);
enemy6.change_x=0;
enemy7=new Sprite("badguy2.png",0.5f);
enemy7.center_x=1450;
enemy7.setBottom(1047);
enemy7.change_x=0;
enemy8=new Sprite("badguy1.png",0.5f);
enemy8.center_x=2250;
enemy8.setBottom(1047);
enemy8.change_x=0;
enemy9=new Sprite("badguy4.png",0.5f);
enemy9.center_x=1500;
enemy9.setBottom(1047);
enemy9.change_x=0;
tile1=loadImage("Tile1.png");
desk=loadImage("Desk.png");
shelf = loadImage("shelf1.png");
createPlatforms("map1.csv");
win= new Sprite("win.png",1.0f,view_x+950,view_y+500);
lose = new Sprite("lose.png",1.0f,view_x+950,view_y+500);
green1 = 0;
green2 =0;
green3=0;
green4=0;
green5=0;
green6=0;
green7=0;
green8=0;
green9=0;
green10=0;
enemy1.change_x=10;
enemy2.change_x=10;
enemy3.change_x=10;
enemy4.change_x=10;
enemy5.change_x=10;
enemy6.change_x=10;
enemy7.change_x=10;
enemy8.change_x=10;
enemy9.change_x=10;
ready = false;
level1=true;
level2=false;
level2Start=false;
account=false;
market=false;
infoManage=false;
interview = false;

}



//modify and draw images
public void draw(){
background(250);
scroll();
displayAll();
updateAll();
}



public void scroll(){
  float right_boundary = view_x+width-RIGHT_MARGIN;
  if(p.getRight()> right_boundary){
   view_x+=p.getRight()-right_boundary; 
  }
  float left_boundary = view_x+LEFT_MARGIN;
  if(p.getLeft()<left_boundary){
    view_x -=left_boundary-p.getLeft();
  }
  float bottom_bound = view_y+height-VERTICAL_MARGIN;
  if(p.getBottom()>bottom_bound){
   view_y+=p.getBottom()-bottom_bound; 
  }
  float top_bound = view_y+VERTICAL_MARGIN;
  if(p.getTop()<top_bound){
   view_y -= top_bound-p.getTop();
  }
  translate(-view_x,-view_y);
}



public void drawRect(){
fill(174, green1,  255);
rect(view_x, view_y, 100, 50);
fill(174,green2, 255);
rect(view_x+101, view_y, 100, 50);
fill(174,green3, 255);
rect(view_x+202, view_y, 100, 50);
fill(174,green4, 255);
rect(view_x+303, view_y, 100, 50);
fill(174,green5, 255);
rect(view_x+404, view_y, 100, 50);
fill(174,green6, 255);
rect(view_x+505, view_y, 100, 50); 
fill(174,green7, 255);
rect(view_x+606, view_y, 100, 50); 
fill(174,green8, 255);
rect(view_x+707, view_y, 100, 50); 
fill(174,green9, 255);
rect(view_x+808, view_y, 100, 50); 
fill(174,green10, 255);
rect(view_x+909, view_y, 100, 50); 
}

public void drawRect1(){
fill(174, green1,  255);
rect(view_x, view_y, 100, 50);
fill(174,green2, 255);
rect(view_x+101, view_y, 100, 50);
}



public boolean isOnPlat(Sprite s, ArrayList<Sprite> walls){
 s.center_y+=5;
 ArrayList<Sprite>col_list =checkCollisionList(s, walls);
 s.center_y-=5;
 if(col_list.size()>0){
  return true; 
 }
 else {
  return false; 
 }
}


public boolean checkCollision(Sprite s1, Sprite s2){  
boolean noXOverlap = s1.getRight() <= s2.getLeft() || s1.getLeft()>=s2.getRight();
boolean noYOverlap = s1.getBottom() <= s2.getTop() || s1.getTop()>=s2.getBottom();
if (noXOverlap || noYOverlap){
 return false;  
}
else {
return true; 
}
}


public ArrayList<Sprite> checkCollisionList(Sprite s1, ArrayList<Sprite> list){
 ArrayList<Sprite> collision_list = new ArrayList<Sprite>();
 for(Sprite p: list){
  if(checkCollision(s1, p)) 
  collision_list.add(p);
 }
 return  collision_list;
}


public void resolvePlatformCollisions(Sprite s, ArrayList <Sprite> walls){
  s.change_y +=GRAVITY;
  s.center_y += s.change_y;
  ArrayList<Sprite> col_list = checkCollisionList(s,walls);
  if(col_list.size()>0){
   Sprite collided = col_list.get(0);
   if(s.change_y>0){
     s.setBottom(collided.getTop());
   }
   else if(s.change_y<0){
    s.setTop(collided.getBottom()); 
   }
   s.change_y=0;
  }
  
  s.center_x+=s.change_x;
  col_list = checkCollisionList(s,walls);
  if(col_list.size()>0){
    Sprite collided = col_list.get(0);
    if(s.change_x>0){
      s.setRight(collided.getLeft());
    }
    else if(s.change_x<0){
     s.setLeft(collided.getRight()); 
    }
  }
  
}


public void createPlatforms(String filename){
  String[] lines = loadStrings(filename);
  for (int row=0; row < lines.length; row++){
    String[] values = split(lines[row], ",");
    for(int col = 0; col<values.length; col++){
    if(values[col].equals("1")){
     Sprite t= new Sprite(tile1, SPRITE_SCALE);
     t.center_x = SPRITE_SIZE/2+col*SPRITE_SIZE;
     t.center_y=SPRITE_SIZE/2+row*SPRITE_SIZE;
     platforms.add(t);
    }
    else if (values[col].equals("2")){
      Sprite s = new Sprite(desk, SPRITE_SCALE1);
      s.center_x = SPRITE_SIZE/2 + col * SPRITE_SIZE;
      s.center_y = SPRITE_SIZE/2 + row * SPRITE_SIZE;
      platforms.add(s);
    }
        else if (values[col].equals("3")){
      Sprite s = new Sprite(shelf, SPRITE_SCALE3);
      s.center_x = SPRITE_SIZE/2 + col * SPRITE_SIZE;
      s.center_y = SPRITE_SIZE/2 + row * SPRITE_SIZE;
      platforms.add(s);
    }
    }
  }
}
  


//call whenever a key is pressed
public void keyPressed(){
  if(!interview){
  if(keyCode == RIGHT){
   p.change_x=MOVE_SPEED; 
  }
   else if(keyCode == LEFT){
   p.change_x=-MOVE_SPEED; 
  }
   else if(keyCode == UP && isOnPlat(p, platforms)){
   p.change_y= -JUMP_SPEED; 
  }
  }
  else if(isGameOver && key == ' '){
   setup(); 
  }
  if(checkCollision(p,teach) && key =='f' && firstRun==true && level1){
   chat=true;
  }
  if(checkCollision(p,teach) && key=='f'&&reset==true && level1){
    chat1=true;
  }
  else if(checkCollision(p,teach) && key=='f' &&reset1==true && level1){
    chat2=true;
  }
  else if(checkCollision(p,teach) && key=='f' &&reset2==true && level1){
    chat3=true;
  }
  else if(checkCollision(p,teach) && key=='f' &&reset3==true && level1){
    chat4=true;
  }
  else if(checkCollision(p,teach) && key=='f' &&reset4==true && level1){
    chat5=true;
  }
  if(key=='r' && level1){
   p.center_x=100;
   p.setBottom(800); 
   teach1="teach2.png";
   reset=true;
   firstRun=false;
  }
  if(key=='r' && bar_of_know==4 && level1){
   p.center_x=100;
   p.setBottom(800); 
   teach1="teach3.png";
   reset1=true; 
   reset=false;
   reset2=false;
   reset3=false;
   reset4=false;
  }
    if(key=='r' && bar_of_know==6 && level1){
   p.center_x=100;
   p.setBottom(800); 
   teach1="teach4.png";
   reset2=true; 
   reset1=false;
   reset=false;
   reset3=false;
   reset4=false;
  }
    if(key=='r' && bar_of_know==8 && level1){
   p.center_x=100;
   p.setBottom(800); 
   teach1="teach2.png";
   reset3=true; 
   reset=false;
   reset2=false;
   reset1=false;
   reset4=false;
  }
  if(key == ' ' && resumeT){
   resumeT=false;
   p.center_x=4600;
   p.center_y=800;
   mentor2.center_x=4500;
   mentor2.center_y=1000;
   interview=true;
   bar_of_know=0;
   question = 1;
  }
  if(bar_of_know==10 && key == ' '){
   ready=true; 
  }
  if(level2 && key=='1'){
    account=true;
    level2Start=false;
  }
  else if(level2 && key=='2'){
   market=true; 
   level2Start=false;
  }
  else if(level2 && key=='3'){
   infoManage=true; 
   level2Start=false;
  }
  if(checkCollision(p,mentor1) && key == 'f'){
   chat=true; 
   //mentor=false;
  }
    if(checkCollision(p,mentor2) && key == 'f'){
   chat1=true; 
  }
  if(key == ENTER){
    p.center_x=2000;
    p.setBottom(2300);
  }
  if (key== 't' && bar_of_know==2){
    resumeT=true;
  }

   if(key == ESC){
    exit(); 
   }
}


//call whenever a key is released
public void keyReleased(){
    if(keyCode == RIGHT){
   p.change_x=0; 
  }
   else if(keyCode == LEFT){
   p.change_x=0; 
  }
   else if(keyCode == UP){
   p.change_y=0; 
  }
   else if(keyCode == DOWN){
     p.change_y=0;
   }
   else if(key=='f'){
    chat=false;
    chat1=false;
    chat2=false;
    chat3=false;
    chat4=false;
    chat5=false;
   }
}
public void mouseClicked(){
 if((mouseX>1044&&mouseX<1385) && (mouseY>869 && mouseY<973)&&firstRun){
   isOnHome=false;
 }
 else if((mouseX>459 && mouseX<825) && (mouseY>875 && mouseY<980) && firstRun){
   exit();
 }
 if((mouseX>492 && mouseX<831) && (mouseY>778 && mouseY<880) && bar_of_know<=-50.0f && isGameOver==true){
setup();
   
   
 }
 else if((mouseX>1113 && mouseX<1446) && (mouseY>778 && mouseY<880) && isGameOver==true){
  exit(); 
 }
 if((mouseX>492 && mouseX<831) && (mouseY>778 && mouseY<880) && bar_of_know<=-50.0f && isGameOver==true && level2){
   p.center_x=100;
   p.setBottom(2300); 
   isGameOver=false;
   bar_of_know=0;
 }
 //if((mouseX> && mouseX< ) && (mouseY> && mouseY< ) && bar_of_know=10 && interview){
   
 //}
 if((mouseX>493 && mouseX<825) && (mouseY>760 && mouseY<860) && isGameOver==true){
p.center_x=150;
p.center_x=100;
   p.setBottom(2300);
   isGameOver=false;
   bar_of_know=0;
   level1=false;
   level2=true;
   level2Start=true;
   ready = false;
enemy1.setBottom(2350);
enemy2.setBottom(2350);
enemy3.setBottom(2350);
enemy4.setBottom(2350);
enemy5.setBottom(2350);
enemy6.setBottom(2350);
enemy7.setBottom(2350);
enemy8.setBottom(2350);
enemy9.setBottom(2350); 
teach.setBottom(2350);
enemy2.center_x=1100;
enemy3.center_x=1300;
enemy4.center_x=2600;
enemy8.center_x=2600;
enemy9.center_x=2150;
enemy6.center_x=2000;
enemy7.center_x=1350;
}
}

   public void displayAll(){
    for(Sprite s: platforms){
s.display();
}
for(Sprite enemi: walks){
 enemi.display();
}
if(level1){
  text("Level 1",view_x+50,view_y+200); 
}
if(level2){
 text("Level 2",view_x+50,view_y+200); 
}
mentor1.display();
mentor2.display();
enemy1.display();
enemy2.display();
enemy3.display();
enemy4.display();
enemy5.display();
enemy6.display();
enemy7.display();
enemy8.display();
enemy9.display();
move=enemy1.change_x;
move1=enemy2.change_x;
move2=enemy3.change_x;
move3=enemy4.change_x;
move4=enemy5.change_x;
move5=enemy6.change_x;
move6=enemy7.change_x;
move7=enemy8.change_x;
move8=enemy9.change_x;
if(level1){
if(enemy1.center_x<=600 && enemy1.center_x>=340){
 enemy1.change_x=move; 
}
else {
 enemy1.change_x*=-1; 
}
if(enemy5.center_x<=650 && enemy5.center_x>=290){
 enemy5.change_x=move4; 
}
else {
 enemy5.change_x*=-1; 
}
if(enemy2.center_x<=1100 && enemy2.center_x>=990){
 enemy2.change_x=move1; 
}
else {
 enemy2.change_x*=-1; 
}
if(enemy3.center_x<=1900 && enemy3.center_x>=1500){
 enemy3.change_x=move2; 
}
else {
 enemy3.change_x*=-1; 
}
if(enemy6.center_x<=1900 && enemy6.center_x>=1500){
 enemy6.change_x=move5; 
}
else{
 enemy6.change_x*=-1; 
}
if(enemy7.center_x<=1900 && enemy7.center_x>=1500){
enemy7.change_x=move6;  
}
else{
 enemy7.change_x*=-1; 
}
if(enemy9.center_x<=1900 && enemy9.center_x>=1500){
 enemy9.change_x=move8; 
}
else {
 enemy9.change_x*=-1; 
}
if(enemy4.center_x<=2450 && enemy4.center_x>=2250){
 enemy4.change_x=move3; 
}
else {
 enemy4.change_x*=-1; 
}
if(enemy8.center_x<=2450 && enemy8.center_x>=2250){
 enemy8.change_x=move7; 
}
else{
 enemy8.change_x*=-1; 
}
}


if(level2){
  if(level2Start){
   text("Choose Your Career!", p.center_x+50,p.center_y-200);
   text("1. Accounting?", p.center_x+50,p.center_y-150);
   text("2. Marketing?",p.center_x+50,p.center_y-100);
   text("3. Information Management?",p.center_x+50,p.center_y-50);
   text("Hit the number of your career choice on your keyboard to begin", p.center_x+200,p.center_y);
  }
if(enemy1.center_x<=700 && enemy1.center_x>=340){
 enemy1.change_x=move; 
}
else {
 enemy1.change_x*=-1; 
}
if(enemy5.center_x<=650 && enemy5.center_x>=290){
 enemy5.change_x=move4; 
}
else {
 enemy5.change_x*=-1; 
}
if(enemy2.center_x<=1450 && enemy2.center_x>=1100){
 enemy2.change_x=move1; 
}
else {
 enemy2.change_x*=-1; 
}
if(enemy3.center_x<=1450 && enemy3.center_x>=1100){
 enemy3.change_x=move2; 
}
else {
 enemy3.change_x*=-1; 
}
if(enemy6.center_x<=2300 && enemy6.center_x>=2000){
 enemy6.change_x=move5; 
}
else{
 enemy6.change_x*=-1; 
}
if(enemy7.center_x<=11500 && enemy7.center_x>=1100){
enemy7.change_x=move6;  
}
else{
 enemy7.change_x*=-1; 
}
if(enemy9.center_x<=1700 && enemy9.center_x>=1400){
 enemy9.change_x=move8; 
}
else {
 enemy9.change_x*=-1; 
}
if(enemy4.center_x<=2900 && enemy4.center_x>=2600){
 enemy4.change_x=move3; 
}
else {
 enemy4.change_x*=-1; 
}
if(enemy8.center_x<=2900 && enemy8.center_x>=2600){
 enemy8.change_x=move7; 
}
else{
 enemy8.change_x*=-1; 
}
}
fill(255,0,0);
text("Disloyalty", enemy4.center_x,enemy4.center_y-100);

fill(255,0,0);
text("Procrastination", enemy3.center_x,enemy3.center_y-100);//procrastination
fill(255,0,0);
text("Cheating", enemy1.center_x,enemy1.center_y-100);//cheating
fill(255,0,0);
text("Plagerism", enemy2.center_x,enemy2.center_y-100);//plagerism
//text("enemy5", enemy5.center_x,enemy5.center_y-100);
//text("enemy6", enemy6.center_x,enemy6.center_y-100);
//text("enemy7", enemy7.center_x,enemy7.center_y-100);
//text("enemy8", enemy8.center_x,enemy8.center_y-100);
p.display(); 
if(isOnHome==true){
home_screen.display();
text("General Controls:", 50,150);
text("Arrow keys to move", 50,200);
text("'f' to talk to mentors", 50,250);
text("click on buttons to move past screens",50,300);
text("Level 1 Specific controls", 50,350);
text("'r' to go to next classroom",50,400);
text("space to move to win screen",50,450);
text("after filling 'Bar of Knowledge'",50,500);
text("Level 1 Pass Requirements:",50,600);
text("Fill up Bar of Knowledge to 10 by gaining knowledge from teachers", 50,650);
text("Level 2 Pass Requirements:",50,700);
text("Choose your preferred career and complete 2 'internships'",50,750);
text("Create your resume by combining bar of knowledge and bar of work experience",50,800);




}
textSize(32);
if(level1){
text("Bar Of Knowledge: "+bar_of_know,view_x+50,view_y+100);
}
if(level2){
  if(!interview){
  text("Bar Of Work Experience: "+bar_of_know,view_x+50,view_y+100);
  }
  else{
      text("Bar Of Interest: "+bar_of_know,view_x+50,view_y+100);

  }
}

if(level1){
drawRect();
}
else if(level2){
fill(174, green1,  255);
rect(view_x, view_y, 100, 50);
fill(174,green2, 255);
rect(view_x+101, view_y, 100, 50);
}
teach.display();
resume.center_x=view_x+950;
resume.center_y=mentor1.center_y-315;
win.center_x=view_x+950;
win.center_y=view_y+500;
lose.center_x=view_x+950;
lose.center_y=view_y+500;
if(level1){
if(chat){
    textSize(32);
   text("Master the basics of supply and demand,", 2500,650); 
   text("and connect economic concepts to current",2500,700);
   text("events for a practical understanding of",2500,750);
   text("how economics influences the world around you.",2500,800);
   firstDone=true;
}

if(chat1){
   text("Master social science basics like culture", 2500,650); 
   text("and human behavior, and connect them",2500,700);
   text("to current events for a practical",2500,750);
   text("understanding of the world's complexities.",2500,800);
   secondDone=true;
}
if(chat2){//CHANGE
   text("Excel in political science by cultivating", 2500,650); 
   text("diverse knowledge, critical thinking,",2500,700);
   text(" and strong research skills. Stay",2500,750);
   text("informed, network, and seek practical experience",2500,800);
   text("to navigate the dynamic political landscape",2500,850);
   text("effectively.",2500,900);
   thirdDone=true;
}
if(chat3){//CHANGE
   text("Business is the pursuit of profit", 2500,650); 
   text("through the creation, production,",2500,700);
   text("and exchange of goods and services.",2500,750);
   text("Success hinges on effective management",2500,800);
   text(", strategic decision-making, and",2500,850);
   text("adaptability to market dynamics",2500,900);
   fourthDone=true;
}
if(chat4){//CHANGE
   text("Loyalty is a committed and steadfast", 2500,650); 
   text(" allegiance to a person, group, cause,",2500,700);
   text("or organization, marked by unwavering",2500,750);
   text("support and trust.",2500,800);
   fifthDone=true;
}
if(chat5){//CHANGE
   text("Reading comprehension is crucial at", 2500,650); 
   text("work for effective communication,",2500,700);
   text(" problem-solving, policy adherence, and",2500,750);
   text(" staying informed, supporting overall",2500,800);
   text("job performance and professional development.",2500,850);
   sixthDone=true;
}
if(firstDone==true){
 bar_of_know=2;
 firstDone=false;
}
else if(secondDone==true){
 bar_of_know=4;
 secondDone=false;
}
else if(thirdDone==true){
 bar_of_know=6;
 thirdDone=false;
}
else if(fourthDone==true){
 bar_of_know=8;
 fourthDone=false;
}
else if(fifthDone==true){
 bar_of_know=10;
 fifthDone=false;
}
   }
   
   if(level2){
    if(account){
      if(chat){
        text("You've gained knowledge on how to guide a business' financial decisions",1000,2000);
        bar_of_know=1;
        text("Ready to move on? Hit enter",1500,2050);
      }
      else if(chat1){
        text("You've gained knowledge on how to prepare financial documents",2500,2000);
        bar_of_know=2;
        text("Hit 't' to generate your resume", 2500,1950);
      }
    }
    if(market){
      if(chat){
        text("You've gained understanding on how to boost customer engagement.", 1000,2000);
        bar_of_know=1;
        text("Ready to move on? Hit enter",1500,2050);
      }
      else if(chat1){
        text("You've gained understanding on how to build brand awareness.",2500,2000);
        bar_of_know=2;
        text("Hit 't' to generate your resume", 2500,1950);
      } 
      }
    }
    if(infoManage){
      if(chat){
        text("You've gained a broad understanding of business organisations", 1000,2000);
        bar_of_know=1;
        text("Ready to move on? Hit enter",1500,2050);
      }
      else if(chat1){
        text("You've gained subject-specific knowledge in areas such as markets and customer",2500,2000);
        bar_of_know=2;
        text("Hit 't' to generate your resume", 2500,1950);
      }
    }
   if(resumeT){
    resume.display();
    fill(255,0,0);
    text("Bar of Knowledge: 10/10", view_x+300,mentor1.center_y-625);
        text("Bar of Work Experience: 2/2", view_x+300,mentor1.center_y-575);
        if(account){
          text("Gained knowledge on how to guide a business' financial decisions", view_x+300,mentor1.center_y-535);
          text("Gained knowledge on how to prepare financial documents",view_x+300,mentor1.center_y-485);
          text("hit space to move onto your interview",view_x+300,mentor1.center_y-435);
        }
        else if(market){
          text("Gained understanding on how to boost customer engagement.", view_x+300,mentor1.center_y-535);
          text("Gained understanding on how to build brand awareness.",view_x+300,mentor1.center_y-485); 
          text("hit space to move onto your interview",view_x+300,mentor1.center_y-435);
        }
        else if(infoManage){
          text("Gained a broad understanding of business organisations", view_x+300,mentor1.center_y-535);
          text("Gained subject-specific knowledge in areas such as markets and customer",view_x+300,mentor1.center_y-485); 
          text("hit space to move onto your interview",view_x+300,mentor1.center_y-435);
        }

   }
   if(interview){
    text("Choose 1 or 2 to answer interview questions to boost Bar of Interest", view_x+500,mentor2.center_y-200); 
    if(question == 1){
    text("Why do you want this job?", mentor2.center_x,mentor2.center_y-100); 
    text("1. I needed more money", p.center_x-300,p.center_y+200);
    text("2. I am highly interested in this field", p.center_x-300,p.center_y+250);    
    }
    else if(key == ' ' && question == 2){
    text("What are some of your strenghts?", mentor2.center_x,mentor2.center_y-100); 
    text("3. I'm great at playing basket ball and video games!", p.center_x-300,p.center_y+200);
    text("4. I have a lot of experience with time management", p.center_x-300,p.center_y+250);  
    text("and I am hard working", p.center_x-300,p.center_y+275);
    }
    else if( key == ' ' && question == 3){
    text("What are your salary expectations?", mentor2.center_x,mentor2.center_y-100); 
    text("5. I'd like as much as you can give me!", p.center_x-300,p.center_y+200);
    text("6. Based on the industry standard, I think", p.center_x-300,p.center_y+250);  
    text("50,000 is a decent starting salary",p.center_x-300,p.center_y+275);
    }
    else if(key == ' ' && question == 4){
    text("How would you describe yourself?", mentor2.center_x,mentor2.center_y-100); 
    text("7. I'm very easy going and like to chill", p.center_x-300,p.center_y+200);
    text("8. I'm very dedicated to finishing anything that I start", p.center_x-300,p.center_y+250);  
    }
    else if(key == ' ' && question == 5){
    text("What are your weaknesses?", mentor2.center_x,mentor2.center_y-100); 
    text("9. I find myself being too particular with", p.center_x-300,p.center_y+200);
    text("certain details in a project",p.center_x-300,p.center_y+225);
    text("10(hit '0'). I need to take breaks pretty", p.center_x-300,p.center_y+250);  
    text(" often to 'destress' on my phone",p.center_x-300,p.center_y+275);
    }
    if(key=='1'&& question == 1){
     text("Alright",mentor2.center_x,mentor2.center_y-100); 
     bar_of_know=0;
     question =2;
    }
    else if(key=='2' & question == 1){
      text("Alright",mentor2.center_x,mentor2.center_y-100); 
      bar_of_know=2;
      question = 2;
    }
    else if(key=='3' && question == 2){
      text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know-=2;
      question = 3;
    }
    else if(key=='4' && question == 2){
      text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know+=2;
      question = 3;
    }
    else if(key=='5' && question == 3){
      text("Okay, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know-=2;
      question = 4; 
    }
    else if(key=='6' && question == 3){
      text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know+=2;
      question = 4;
    }
    else if(key=='7'  && question == 4){
       text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know-=2;
      question = 5;
    }
    else if(key=='8' && question == 4){
      text("Okay, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know+=2;
      question = 5;
    }
    else if(key=='9' && question == 5){
      text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know=10;
      question = 6;
    }
    else if(key=='0' && question == 5){
           text("Alright, lets move on", mentor2.center_x,mentor2.center_y-100);
      bar_of_know=bar_of_know-2;
      question = 6;
    }
          if(bar_of_know>=8 && question == 6){
       text("Congrats, We'd love to have you aboard",  mentor2.center_x,mentor2.center_y-100);
       text("press backspace to proceed", mentor2.center_x,mentor2.center_y-50);
       if(key== BACKSPACE){
       isGameOver=true;
       win1.display();
       }
      }
      else if(bar_of_know<8 && question == 6){
       text("Im sorry but you're not a good fit for our team", mentor2.center_x,mentor2.center_y-100);
       question = 1;
      }
    drawRect();
   }
collectKnowledge();
if(isGameOver){
 if(bar_of_know<=-50){
 lose.display();
 }
 else{
 win.display();
 }
  
 }
}
  
   
   
   public void updateAll(){
       if (frameCount % 30 == 0) {
    println(frameRate);
  }
     enemy1.center_x+=enemy1.change_x;
     enemy2.center_x+=enemy2.change_x;
     enemy3.center_x+=enemy3.change_x;
     enemy4.center_x+=enemy4.change_x;
     enemy5.center_x+=enemy1.change_x;
     enemy6.center_x+=enemy2.change_x;
     enemy7.center_x+=enemy3.change_x;
     enemy8.center_x+=enemy4.change_x;
     enemy9.center_x+=enemy1.change_x;
     checkDeath();
     teach = new Sprite(teach1, Teach_Scale, 3200,850);
     if(bar_of_know==1){
     green1=198;
     }
     else if(bar_of_know==2){
     green1=198;
     green2=198;
     }
     else if(bar_of_know==4){
           green1=198;
           green2=198;
           green3=198;
           green4=198;
     }
     else if(bar_of_know==6){
           green1=198;
           green2=198;
           green3=198;
           green4=198;
           green5=198;
           green6=198;
     }
          else if(bar_of_know==8){
           green1=198;
           green2=198;
           green3=198;
           green4=198;
           green5=198;
           green6=198;
           green7=198;
           green8=198;
     }
     else if(bar_of_know==10){
           green1=198;
           green2=198;
           green3=198;
           green4=198;
           green5=198;
           green6=198;
           green7=198;
           green8=198;
           green9=198;
           green10=198;
     }
     else{
           green1=0;
           green2=0;
           green3=0;
           green4=0;
           green5=0;
           green6=0;
           green7=0;
           green8=0;
           green9=0;
           green10=0;
     }
     for(Sprite enemi:walks){
      enemi.update();
      ((AnimatedSprite)enemi).updateAnimation();
     }
       resolvePlatformCollisions(p,platforms);
   }
   
   public void checkDeath(){
collideEnemy = checkCollision(p, enemy1);
collideEnemy1 = checkCollision(p,enemy2);
collideEnemy2 = checkCollision(p,enemy3);
collideEnemy3=checkCollision(p,enemy4);
collideEnemy4=checkCollision(p,enemy5);
collideEnemy5=checkCollision(p,enemy6);
collideEnemy6=checkCollision(p,enemy7);
collideEnemy7=checkCollision(p,enemy8);
collideEnemy8=checkCollision(p,enemy9);

     if(collideEnemy||collideEnemy1||collideEnemy2||collideEnemy3||collideEnemy4||collideEnemy5||collideEnemy6||collideEnemy7||collideEnemy8){
      bar_of_know--;
       if(bar_of_know<=-50.0f){
       isGameOver=true; 
      }

     }
     
   }
   
   public void collectKnowledge(){
    if(ready){
     isGameOver=true; 
    }
   }
public class AnimatedSprite extends Sprite{
 PImage[] currentImages;
 PImage[] standNeutral;
 PImage[] moveLeft;
 PImage[] moveRight;
 int direction;
 int index;
 int frame; 
 public AnimatedSprite(PImage img,  float scale){
   super(img, scale);
   direction = NEUTRAL_FACING;
   index =0;
   frame = 0;
 }

public  void updateAnimation(){
  frame++;
  if(frame % 5  ==0){
    selectDirection();
    selectCurrentImages();
    advanceToNextImage();
  }
}

public void selectDirection(){
  if(change_x>0){
   direction= RIGHT_FACING; 
  }
  else if(change_x<0){
   direction=LEFT_FACING; 
  }
  else{
   direction = NEUTRAL_FACING; 
  }
}

public void selectCurrentImages(){
  if(direction == RIGHT_FACING){
   currentImages=moveRight;
  }
  else   if(direction == LEFT_FACING){
   currentImages=moveLeft;
  }
  else{
   currentImages=standNeutral;
  }
}

public void advanceToNextImage(){
  index++;
  if(index>=currentImages.length){
   index=0;
  }
 image = currentImages[index];
}
}
public class Coin extends AnimatedSprite{
  public Coin(PImage img,   float scale){
   super (img,scale); 
   standNeutral = new PImage[4];
   standNeutral[0] = loadImage("walk1.png");
      standNeutral[1] = loadImage("Walk2.png");
         standNeutral[2] = loadImage("Walk3.png");
            standNeutral[3] = loadImage("Walk4.png");
            currentImages =standNeutral; 
            
  }
  
}
public class Enemy extends AnimatedSprite{
 float boundaryLeft, boundaryRight;
 public Enemy(PImage img, float scale, float bLeft, float bRight){
  super (img,scale);
  moveLeft = new PImage[4];
  moveLeft[0] = loadImage("enemywalk.png");
  moveLeft[1] = loadImage("enemywalk1.png");
  moveLeft[2] = loadImage("enemywalk2.png");
  moveLeft[3] = loadImage("enemywalk3.png");
  moveRight = new PImage[4];
  moveRight[0]=loadImage("enemywalk3.png");
  moveRight[1]=loadImage("enemywalk2.png");
  moveRight[2]=loadImage("enemywalk1.png");
  moveRight[3]=loadImage("enemywalk.png");
  currentImages = moveRight;
  direction = RIGHT_FACING;
  boundaryLeft=bLeft;
  boundaryRight = bRight;
  change_x = 1;
 }
 public void update(){
  super.update();
  if(getLeft()<=boundaryLeft){
   setLeft(boundaryLeft);
   change_x *=-1;
  }
  else if (getRight()>= boundaryRight){
   setRight(boundaryRight);
   change_x*=-1;
  }
 }
}
public class Player extends AnimatedSprite{

  boolean onPlatform, inPlace;
  PImage[]standLeft;
  PImage[]standRight;
  PImage[]jumpLeft;
  PImage[]jumpRight;
  public Player(PImage img, float scale){
   super(img,scale);
   direction=RIGHT_FACING;
   onPlatform = true;  
   inPlace =  true;
   standLeft = new PImage[1];
   standLeft[0] = loadImage("stand - Copy.png");
   standRight = new PImage[1];
   standRight[0]=loadImage("stand.png");
   jumpLeft = new PImage[1];
   jumpLeft[0] = loadImage("jump.png");
   moveLeft =new PImage[4];
   moveLeft[0] = loadImage("walk1.png");
   moveLeft[1]=loadImage("Walk2.png");
   moveLeft[2] = loadImage("Walk3.png");
   moveLeft[3] = loadImage("Walk4.png");
   moveRight = new PImage[4];
   moveRight[0] = loadImage("Walk4 - Copy.png");
   moveRight[1]=loadImage("Walk3 - Copy.png");
   moveRight[2] = loadImage("Walk2 - Copy.png");
   moveRight[3] = loadImage("walk1 - Copy.png");
   currentImages = standRight;
  }
  @Override
  public void updateAnimation(){
   onPlatform = isOnPlat(this, platforms);
   inPlace = change_x==0 && change_y==0;
   super.updateAnimation();
  }
  @Override 
  public void selectDirection(){
    if(change_x>0){
      direction = RIGHT_FACING;
    }
    else if(change_x<0){
    direction=LEFT_FACING;
    }
  }
  @Override
  public void selectCurrentImages(){
    if(direction == RIGHT_FACING){
     if(inPlace){
      currentImages =standRight; 
     }
     else{
      currentImages = moveRight; 
     }
    }
    else if(direction == LEFT_FACING){
     if(inPlace){
      currentImages =standLeft; 
     }
     else if(!onPlatform){
      currentImages = jumpLeft; 
     }
     else{
      currentImages = moveLeft; 
     }
    }
  }
  
}
public class Sprite{
PImage image;
float center_x, center_y;
float change_x, change_y;
float w, h;

  public Sprite(String filename, float scale, float x, float y){
  image = loadImage(filename);
  w=image.width*scale;
  h=image.height*scale;
  center_x=x;
  center_y=y;
  change_x=0;
  change_y=0;
}
 public Sprite(String filename, float scale){
  this(filename, scale, 0,0);
 }
 public Sprite(PImage img, float scale){
   image = img;
  w=image.width*scale;
  h=image.height*scale;
  center_x=0;
  center_y=0;
  change_x=0;
  change_y=0;
 }
 public void display(){
 image(image,center_x,center_y,w,h);  
 }
 
 
 public void update(){
  center_x+=change_x;
  center_y += change_y;
 }
 
 public void setLeft (float newLeft){
  center_x = newLeft +w/2; 
 }
 
 
public float getLeft(){
   return center_x - w/2;
 }
 
 
 public void setRight(float newRight){
  center_x = newRight-w/2; 
 }
 
 
public float getRight(){
   return center_x+w/2;
 }
 
 
 public void setTop(float newTop){
  center_y=newTop+h/2; 
 }
 

public float getTop(){
   return center_y-w/2;
 }
 
 
 public void setBottom(float newBottom){
  center_y=newBottom-w/2;
 }
 
 
public float getBottom(){
   return center_y+w/2;
}
  
}


  public void settings() { size(1920, 1200); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "Platformer" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
